package org.example.course_work;import javafx.collections.FXCollections;import javafx.collections.ObservableList;import javafx.event.ActionEvent;import javafx.fxml.FXML;import javafx.fxml.Initializable;import javafx.scene.control.*;import javafx.scene.control.cell.PropertyValueFactory;import javafx.scene.image.Image;import javafx.scene.image.ImageView;import javafx.scene.input.MouseEvent;import javafx.scene.layout.Pane;import javafx.stage.FileChooser;import javafx.stage.Stage;import java.io.*;import java.net.URL;import java.util.*;import java.util.concurrent.LinkedTransferQueue;import java.util.stream.Collectors;public class HelloController implements Initializable {    @FXML    private Button AHDAbtn;    @FXML    private Button DHDbtn;    @FXML    private Button ESCbtn;    @FXML    private Button SHDbtn;    @FXML    private Button SHRbtn;    @FXML    private Button UHDbtn;    @FXML    private Button VHDbtn;    @FXML    private Button VWHbtn;    @FXML    private Button WHDbtn;    @FXML    private TableColumn<Horseinfo, String> ageclm;    @FXML    private TextField agelabel;    @FXML    private Pane ahdpane;    @FXML    private TableView<Horseinfo> ahdtable;    @FXML    private TableColumn<Horseinfo, String> breedclm;    @FXML    private TextField breedlabel;    @FXML    private Pane dhdpane;    @FXML    private TableColumn<Horseinfo, String> groupclm;    @FXML    private ComboBox<String> groupcombobox;    @FXML    private TableColumn<Horseinfo, String> horseidclm;    @FXML    private TextField horseidlabel;    @FXML    private ImageView horseimageview;    @FXML    private TableColumn<Horseinfo, String> horsenameclm;    @FXML    private TextField horsenamelabel;    @FXML    private TableColumn<Horseinfo, String> jockeynameclm;    @FXML    private TextField jockeynamelabel;    @FXML    private TableColumn<Horseinfo, String> racerecordclm;    @FXML    private TextField racerecordlabel;    @FXML    private TextField deleteField;    @FXML    private Pane shdpane;    @FXML    private Pane shrpane;    @FXML    private Pane uhdpane;    @FXML    private Pane vhdpane;    @FXML    private Pane vwhpane;    @FXML    private Pane whdpane;    @FXML    private TableColumn<Horseinfo, String> uhdageclm;    @FXML    private TableColumn<Horseinfo, String> uhdbreedclm;    @FXML    private TableColumn<Horseinfo, String> uhdgroupclm;    @FXML    private TableColumn<Horseinfo, String> uhdhorseidclm;    @FXML    private ImageView uhdhorseimageview;    @FXML    private ImageView uhdhorseimageview11;    @FXML    private TableColumn<Horseinfo, String> uhdhorsenameclm;    @FXML    private TableColumn<Horseinfo, String> uhdjockeynameclm;    @FXML    private TableColumn<Horseinfo, String> uhdracerecordclm;    @FXML    private TableView<Horseinfo> uhdtable;    @FXML    private TableColumn<Horseinfo, String> dhdageclm;    @FXML    private TableColumn<Horseinfo, String> dhdbreedclm;    @FXML    private TableColumn<Horseinfo, String> dhdgroupclm;    @FXML    private TableColumn<Horseinfo, String> dhdhorseidclm;    @FXML    private TableColumn<Horseinfo, String> dhdhorsenameclm;    @FXML    private TableColumn<Horseinfo, String> dhdjockeynameclm;    @FXML    private TableColumn<Horseinfo, String> dhdracerecordclm;    @FXML    private TableView<Horseinfo> dhdtable;    @FXML    private TableColumn<Horseinfo, String> shdageclm;    @FXML    private TableColumn<Horseinfo ,String> shdbreedclm;    @FXML    private TableColumn<Horseinfo, String> shdgroupclm;    @FXML    private TableColumn<Horseinfo, String> shdhorseidclm;    @FXML    private TableColumn<Horseinfo,String> shdhorsenameclm;    @FXML    private TableColumn<Horseinfo, String> shdjockeynameclm;    @FXML    private TableColumn<Horseinfo,String> shdracerecordclm;    @FXML    private TableView<Horseinfo> shdtable;    @FXML    private TableColumn<Horseinfo, String> shrage;    @FXML    private TableColumn<Horseinfo, String> shrbreed;    @FXML    private TableColumn<Horseinfo, String> shrgroup;    @FXML    private TableColumn<Horseinfo, String> shrhorsename;    @FXML    private TableColumn<Horseinfo, String> shrhoseid;    @FXML    private TableColumn<Horseinfo, String> shrjockeyname;    @FXML    private TableColumn<Horseinfo, String> shrracerecord;    @FXML    private TableView<Horseinfo> shrtable;    @FXML    private TableColumn<Horseinfo, String> vhdageclm;    @FXML    private TableColumn<Horseinfo, String> vhdbreedclm;    @FXML    private TableColumn<Horseinfo, String> vhdgroupclm;    @FXML    private TableColumn<Horseinfo, String> vhdhorseidclm;    @FXML    private TableColumn<Horseinfo, String> vhdhorsenameclm;    @FXML    private TableColumn<Horseinfo, Image> vhdimageclm;    @FXML    private TableColumn<Horseinfo, String> vhdjockeynameclm;    @FXML    private TableColumn<Horseinfo, String> vhdracerecordclm;    @FXML    private TableView<Horseinfo> vhdtable;    private final ObservableList <Horseinfo> Horsedata = FXCollections.observableArrayList();    private final ObservableList <Horseinfo> sort = FXCollections.observableArrayList();    final ObservableList<String> Groups = FXCollections.observableArrayList("A","B","C","D");    @Override    public void initialize(URL url, ResourceBundle resourceBundle) {        groupcombobox.setItems(Groups);        groupcomboboxuhd.setItems(Groups);        horseidclm.setCellValueFactory(new PropertyValueFactory<Horseinfo, String>("HorseID"));        horsenameclm.setCellValueFactory(new PropertyValueFactory<Horseinfo, String>("HorseName"));        jockeynameclm.setCellValueFactory(new PropertyValueFactory<Horseinfo, String>("JockeyName"));        ageclm.setCellValueFactory(new PropertyValueFactory<Horseinfo, String>("Age"));        breedclm.setCellValueFactory(new PropertyValueFactory<Horseinfo, String>("Breed"));        racerecordclm.setCellValueFactory(new PropertyValueFactory<Horseinfo, String>("RaceRecord"));        groupclm.setCellValueFactory(new PropertyValueFactory<Horseinfo, String>("Group"));        uhdhorseidclm.setCellValueFactory(new PropertyValueFactory<Horseinfo, String>("HorseID"));        uhdhorsenameclm.setCellValueFactory(new PropertyValueFactory<Horseinfo, String>("HorseName"));        uhdjockeynameclm.setCellValueFactory(new PropertyValueFactory<Horseinfo, String>("JockeyName"));        uhdageclm.setCellValueFactory(new PropertyValueFactory<Horseinfo, String>("Age"));        uhdbreedclm.setCellValueFactory(new PropertyValueFactory<Horseinfo, String>("Breed"));        uhdracerecordclm.setCellValueFactory(new PropertyValueFactory<Horseinfo, String>("RaceRecord"));        uhdgroupclm.setCellValueFactory(new PropertyValueFactory<Horseinfo, String>("Group"));        dhdhorseidclm.setCellValueFactory(new PropertyValueFactory<Horseinfo, String>("HorseID"));        dhdhorsenameclm.setCellValueFactory(new PropertyValueFactory<Horseinfo, String>("HorseName"));        dhdjockeynameclm.setCellValueFactory(new PropertyValueFactory<Horseinfo, String>("JockeyName"));        dhdageclm.setCellValueFactory(new PropertyValueFactory<Horseinfo, String>("Age"));        dhdbreedclm.setCellValueFactory(new PropertyValueFactory<Horseinfo, String>("Breed"));        dhdracerecordclm.setCellValueFactory(new PropertyValueFactory<Horseinfo, String>("RaceRecord"));        dhdgroupclm.setCellValueFactory(new PropertyValueFactory<Horseinfo, String>("Group"));        shdhorseidclm.setCellValueFactory(new PropertyValueFactory<Horseinfo, String>("HorseID"));        shdhorsenameclm.setCellValueFactory(new PropertyValueFactory<Horseinfo, String>("HorseName"));        shdjockeynameclm.setCellValueFactory(new PropertyValueFactory<Horseinfo, String>("JockeyName"));        shdageclm.setCellValueFactory(new PropertyValueFactory<Horseinfo, String>("Age"));        shdbreedclm.setCellValueFactory(new PropertyValueFactory<Horseinfo, String>("Breed"));        shdracerecordclm.setCellValueFactory(new PropertyValueFactory<Horseinfo, String>("RaceRecord"));        shdgroupclm.setCellValueFactory(new PropertyValueFactory<Horseinfo, String>("Group"));        shrhoseid.setCellValueFactory(new PropertyValueFactory<Horseinfo, String>("HorseID"));        shrhorsename.setCellValueFactory(new PropertyValueFactory<Horseinfo, String>("HorseName"));        shrjockeyname.setCellValueFactory(new PropertyValueFactory<Horseinfo, String>("JockeyName"));        shrage.setCellValueFactory(new PropertyValueFactory<Horseinfo, String>("Age"));        shrbreed.setCellValueFactory(new PropertyValueFactory<Horseinfo, String>("Breed"));        shrracerecord.setCellValueFactory(new PropertyValueFactory<Horseinfo, String>("RaceRecord"));        shrgroup.setCellValueFactory(new PropertyValueFactory<Horseinfo, String>("Group"));        vhdhorseidclm.setCellValueFactory(new PropertyValueFactory<Horseinfo, String>("HorseID"));        vhdhorsenameclm.setCellValueFactory(new PropertyValueFactory<Horseinfo, String>("HorseName"));        vhdjockeynameclm.setCellValueFactory(new PropertyValueFactory<Horseinfo, String>("JockeyName"));        vhdageclm.setCellValueFactory(new PropertyValueFactory<Horseinfo, String>("Age"));        vhdbreedclm.setCellValueFactory(new PropertyValueFactory<Horseinfo, String>("Breed"));        vhdracerecordclm.setCellValueFactory(new PropertyValueFactory<Horseinfo, String>("RaceRecord"));        vhdgroupclm.setCellValueFactory(new PropertyValueFactory<Horseinfo, String>("Group"));        vhdimageclm.setCellFactory(col -> new ImageeTableCell());        vhdimageclm.setCellValueFactory(new PropertyValueFactory<>("horseImage"));        dhdtable.setItems(Horsedata);        ahdtable.setItems(Horsedata);        uhdtable.setItems(Horsedata);        shdtable.setItems(Horsedata);        shrtable.setItems(Horsedata);        vhdtable.setItems(sort);        horseidlabeluhd.setDisable(true);    }    @FXML    public void Handle_panes(ActionEvent event) {        if (event.getSource() == AHDAbtn) {            ahdpane.toFront();        }        if (event.getSource() == DHDbtn) {            dhdpane.toFront();        }        if (event.getSource() ==  UHDbtn) {            uhdpane.toFront();        }        if (event.getSource() == VHDbtn) {            vhdpane.toFront();        }        if (event.getSource() == SHDbtn) {            shdpane.toFront();        }        if (event.getSource() == SHRbtn) {            shrpane.toFront();        }        if (event.getSource() == WHDbtn) {            whdpane.toFront();        }        if (event.getSource() == VWHbtn) {            vwhpane.toFront();        }        if (event.getSource() == ESCbtn) {            Alert alert = new Alert(Alert.AlertType.CONFIRMATION);            alert.setTitle("Exit");            alert.setHeaderText("Are you sure you want to exit?");            alert.setContentText("This action cannot be undone.");            Optional<ButtonType> result = alert.showAndWait();            //If user pressed OK, program will exit.            if (result.get() == ButtonType.OK) {                System.exit(0);            }        }    }    @FXML    void deleting_horse_details(ActionEvent event) {        String horseID = deleteField.getText().trim();        // Iterate over the list to find the horse with the matching ID        Iterator<Horseinfo> iterator = Horsedata.iterator();        while (iterator.hasNext()) {            Horseinfo horse = iterator.next();            if (horse.getHorseID().equals(horseID)) {                iterator.remove(); // Remove the horse from the list                showAlert("Deleted", "Horse with ID " + horseID + " has been deleted.");                return; // Exit the method once the horse is deleted            }        }        // If no horse with the given ID is found        showAlert("Not Found", "Horse with ID " + horseID + " not found.");    }    @FXML    void adding_horse_details(ActionEvent event) {        try {            // Get horse details            String horseID = horseidlabel.getText().trim();            String horseName = horsenamelabel.getText().trim();            String jockeyName = jockeynamelabel.getText().trim();            String raceRecord = racerecordlabel.getText().trim();            String group = groupcombobox.getSelectionModel().getSelectedItem();            String age = agelabel.getText().trim();            String breed = breedlabel.getText().trim();            // Validate fields are not empty            if (horseID.isEmpty() || horseName.isEmpty() || jockeyName.isEmpty() || raceRecord.isEmpty() || group == null || age.isEmpty() || breed.isEmpty()) {                showAlert("Input Error", "All fields must be filled out.");                return;            }            // Validate horseID and age are valid integers            int horseIdInt, ageInt;            try {                horseIdInt = Integer.parseInt(horseID);                ageInt = Integer.parseInt(age);            } catch (NumberFormatException ex) {                showAlert("Input Error", "Horse ID and Age must be valid integers.");                return;            }            // Validate horseName and jockeyName to ensure they contain only alphabetic characters            if (!horseName.matches("[a-zA-Z ]+") || !jockeyName.matches("[a-zA-Z ]+")) {                showAlert("Input Error", "Names must only contain alphabetic characters.");                return;            }            // Check if an image is selected            if (horseImage == null) {                showAlert("Input Error", "Please select a horse image.");                return;            }            // Check for duplicate horseID            for (Horseinfo info : Horsedata) {                if (info.getHorseID().equals(horseID)) {                    showAlert("Input Error", "Duplicate Horse ID: " + horseID);                    return;                }            }            sortDetails();            // Create Horse object with image            Horseinfo horse = new Horseinfo(horseID, horseName, jockeyName, age,  breed, raceRecord, group, horseImage);            // Add horse to data            Horsedata.add(horse);            dhdtable.setItems(Horsedata);            ahdtable.setItems(Horsedata);            uhdtable.setItems(Horsedata);            shdtable.setItems(Horsedata);            shrtable.setItems(Horsedata);            vhdtable.setItems(sort);            // Show confirmation            showAlert("Done", "Horse details added successfully.");            // Clear input fields and image            clearInputFields();            horseimageview.setImage(null);            horseImage = null;        } catch (Exception e) {            e.printStackTrace();            showAlert("Error", "An unexpected error occurred.");        }    }    private Image horseImage;    @FXML    void selectImage(ActionEvent event) {        FileChooser fileChooser = new FileChooser();        fileChooser.setTitle("Select Horse Image");        fileChooser.getExtensionFilters().addAll(                new FileChooser.ExtensionFilter("Image Files", "*.png", "*.jpg", "*.gif")        );        File selectedFile = fileChooser.showOpenDialog(new Stage());        if (selectedFile != null) {            horseImage = new Image(selectedFile.toURI().toString());            horseimageview.setImage(horseImage);        }    }    private void showAlert(String title, String message) {        Alert alert = new Alert(Alert.AlertType.INFORMATION);        alert.setTitle(title);        alert.setHeaderText(null);        alert.setContentText(message);        alert.showAndWait();    }    private void clearInputFields() {        horseidlabel.setText("");        horsenamelabel.setText("");        jockeynamelabel.setText("");        racerecordlabel.setText("");        groupcombobox.getSelectionModel().clearSelection();        agelabel.setText("");        breedlabel.setText("");    }    @FXML    private TextField horsenamelabeluhd;    @FXML    private TextField agelabeluhd;    @FXML    private TextField breedlabeluhd;    @FXML    private TextField racerecordlabeluhd;    @FXML    private TextField jockeynamelabeluhd;    @FXML    private TextField horseidlabeluhd;    @FXML    private ComboBox<String> groupcomboboxuhd;    @FXML    public void UpdateHorse(ActionEvent actionEvent){        Horseinfo Horse = getupdates();        if (Horse != null) {            int index = uhdtable.getSelectionModel().getFocusedIndex();            Horseinfo selectedDriver = uhdtable.getItems().get(index);            int dataListIndex = Horsedata.indexOf(selectedDriver);            Horsedata.set(dataListIndex, Horse);            Alert alert = new Alert(Alert.AlertType.CONFIRMATION);            alert.setTitle("Update Driver");            alert.setHeaderText(null);            alert.setContentText("The driver details have been updated successfully in the list.");            alert.showAndWait();            horsenamelabeluhd.setText("");            jockeynamelabeluhd.setText("");            agelabeluhd.setText("");            breedlabeluhd.setText("");            racerecordlabeluhd.setText("");            groupcomboboxuhd.setValue(null);        }    }    public Horseinfo getupdates() {        Horseinfo Horse = null;        try {            String horseid = horseidlabeluhd.getText().trim();            String horsename = horsenamelabeluhd.getText().trim();            String jockeyname = jockeynamelabeluhd.getText().trim();            String racerecord = racerecordlabeluhd.getText().trim();            String group = groupcomboboxuhd.getSelectionModel().getSelectedItem();            String age = agelabeluhd.getText().trim();            String breed = breedlabeluhd.getText().trim();            if (horsename.isEmpty() || jockeyname.isEmpty() || racerecord.isEmpty() || group == null || age.isEmpty() || breed.isEmpty()) {                showAlert("Input Error", "All fields must be filled out.");                return null;            }            // Validate horsename and jockeyname to ensure they contain only alphabetic characters            if (!horsename.matches("[a-zA-Z ]+") || !jockeyname.matches("[a-zA-Z ]+")) {                showAlert("Input Error", "Names must only contain alphabetic characters.");                return null;            }            if (horseImage == null) {                showAlert("Input Error", "Please select a horse image.");                return null;            }            Horse = new Horseinfo(horseid, horsename, jockeyname, age, breed, racerecord, group, horseImage);            showAlert("Done", "Horse details added successfully.");            clearInputFields();            uhdhorseimageview.setImage(null);            horseImage = null;        } catch (Exception e) {            e.printStackTrace();            showAlert("Error", "An unexpected error occurred.");        }        return Horse;    }    @FXML    void selectImage2(ActionEvent event) {        FileChooser fileChooser = new FileChooser();        fileChooser.setTitle("Select Horse Image");        fileChooser.getExtensionFilters().addAll(                new FileChooser.ExtensionFilter("Image Files", "*.png", "*.jpg", "*.gif")        );        File selectedFile = fileChooser.showOpenDialog(new Stage());        if (selectedFile != null) {            horseImage = new Image(selectedFile.toURI().toString());            uhdhorseimageview.setImage(horseImage);        }    }    @FXML    public void fillFields(MouseEvent event) {        //Get the selection from table and fill that data to text fields.        Horseinfo selected = uhdtable.getSelectionModel().getSelectedItem();        if (selected != null){            horseidlabeluhd.setText(selected.getHorseID());            horsenamelabeluhd.setText(selected.getHorseName());            agelabeluhd.setText(String.valueOf(selected.getAge()));            jockeynamelabeluhd.setText(selected.getJockeyName());            breedlabeluhd.setText(selected.getBreed());            racerecordlabeluhd.setText(selected.getRaceRecord());            groupcomboboxuhd.setValue(selected.getGroup());            uhdhorseimageview.setImage(selected.getHorseImage());        }else {            horseidlabeluhd.setText("");            horsenamelabeluhd.setText("");            jockeynamelabel.setText("");            agelabeluhd.setText("");            breedlabeluhd.setText("");            racerecordlabeluhd.setText("");            groupcomboboxuhd.setValue(null);            uhdhorseimageview.setImage(null);        }    }    public void sortDetails() {        sort.clear();        sort.addAll(Horsedata);        // Sort the list by horseID using bubble sort        for (int i = 0; i < sort.size() - 1; i++) {            for (int x = 0; x < sort.size() - i - 1; x++) {                int horseId1 = Integer.parseInt(sort.get(x).getHorseID());                int horseId2 = Integer.parseInt(sort.get(x + 1).getHorseID());                if (horseId1 < horseId2) {                    Horseinfo temp = sort.get(x);                    sort.set(x, sort.get(x + 1));                    sort.set(x + 1, temp);                }            }        }        vhdtable.setItems(sort);    }    File file = new File("src\\main\\resources\\org\\example\\course_work\\HorseData.txt");    @FXML    public void SaveData(ActionEvent actionEvent){        if (Horsedata.isEmpty()) {            Alert alert = new Alert(Alert.AlertType.ERROR);            alert.setTitle("Error");            alert.setHeaderText(null);            alert.setContentText("HorseData list is empty");            alert.showAndWait();            return;        }        if (file!=null) {            try {                PrintWriter printWriter = new PrintWriter(new PrintWriter(file));                for (Horseinfo horseinfo:Horsedata) {                    printWriter.write(horseinfo.getHorseID() + "," + horseinfo.getHorseName() + "," + horseinfo.getJockeyName() + "," + horseinfo.getAge() + "," + horseinfo.getBreed() + "," + horseinfo.getRaceRecord() + "," + horseinfo.getGroup() + "\n");                }                printWriter.close();                Alert alert = new Alert(Alert.AlertType.CONFIRMATION);                alert.setTitle("Done");                alert.setHeaderText(null);                alert.setContentText("Horse data has been saved");                alert.showAndWait();            } catch (Exception e) {                Alert alert = new Alert(Alert.AlertType.ERROR);                alert.setTitle("Error");                alert.setHeaderText(null);                alert.setContentText("Error saving Horse data to file.");                alert.showAndWait();            }        }    }    @FXML    private Label shrLabel;    final ObservableList<Horseinfo> selectedHorses = FXCollections.observableArrayList();    @FXML    void displayRandomHorses(ActionEvent event) {        try {            File file = new File("src\\main\\resources\\org\\example\\course_work\\HorseData.txt");            Scanner scanner = new Scanner(file);            ObservableList<Horseinfo> allHorses = FXCollections.observableArrayList();            while (scanner.hasNextLine()) {                String line = scanner.nextLine();                String[] horseData = line.split(",");                if (horseData.length == 7) {                    Horseinfo horse = new Horseinfo(horseData[0], horseData[1], horseData[2], horseData[3], horseData[4], horseData[5], horseData[6]);                    allHorses.add(horse);                }            }            scanner.close();            for (String group : Groups) {                List<Horseinfo> groupHorses = new ArrayList<>();                for (Horseinfo horse : allHorses) {                    if (horse.getGroup().equals(group)) {                        groupHorses.add(horse);                    }                }                if (groupHorses.isEmpty()) {                    showAlert("Error", "There are no horses in group " + group + ". Update the text file");                    return;                }                Collections.shuffle(groupHorses);                selectedHorses.add(groupHorses.get(0));            }            StringBuilder shrLabelText = new StringBuilder();            for (Horseinfo horse : selectedHorses) {                shrLabelText.append("Horse ID: ").append(horse.getHorseID()).append(", ");                shrLabelText.append("Name: ").append(horse.getHorseName()).append(", ");                shrLabelText.append("Jockey: ").append(horse.getJockeyName()).append(", ");                shrLabelText.append("Age: ").append(horse.getAge()).append(", ");                shrLabelText.append("Breed: ").append(horse.getBreed()).append(", ");                shrLabelText.append("Race Record: ").append(horse.getRaceRecord()).append(", ");                shrLabelText.append("Group: ").append(horse.getGroup()).append("\n\n");            }            shrLabel.setText(shrLabelText.toString());        } catch (FileNotFoundException e) {            showAlert("Error", "Horse data file not found.");        } catch (Exception e) {            e.printStackTrace();            showAlert("Error", "An unexpected error occurred.");        }    }}